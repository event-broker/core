/**
 * –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç EventBroker vs –Ω–∞—Ç–∏–≤–Ω—ã–π EventEmitter
 * –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞ EventBroker
 */

const { EventBroker } = require('../dist/core/EventBroker');
const { InMemoryClient } = require('../dist/clients/InMemoryClient/InMemoryClient');
const { EventEmitter } = require('events');

console.log('üî¨ –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: EventBroker vs EventEmitter üî¨\n');

function testEventEmitter() {
  console.log('üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π EventEmitter...');

  const emitters = [];
  const clientCount = 100;
  const eventsPerClient = 1000;
  let receivedCount = 0;

  // –°–æ–∑–¥–∞–µ–º EventEmitter'—ã
  for (let i = 0; i < clientCount; i++) {
    const emitter = new EventEmitter();
    emitter.setMaxListeners(clientCount); // –ò–∑–±–µ–≥–∞–µ–º warning'–æ–≤
    emitters.push(emitter);

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π emitter –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ç –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    emitters.forEach((otherEmitter, otherIndex) => {
      if (otherIndex !== i) {
        otherEmitter.on('test-event', () => {
          receivedCount++;
        });
      }
    });
  }

  const startTime = Date.now();
  const startMemory = process.memoryUsage();

  // –ö–∞–∂–¥—ã–π emitter –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è
  emitters.forEach((emitter, emitterIndex) => {
    for (let i = 0; i < eventsPerClient; i++) {
      emitter.emit('test-event', {
        id: emitterIndex * eventsPerClient + i,
        clientId: emitterIndex,
        payload: `Event ${i} from emitter ${emitterIndex}`,
      });
    }
  });

  setTimeout(() => {
    const endTime = Date.now();
    const endMemory = process.memoryUsage();
    const duration = endTime - startTime;

    const totalSent = clientCount * eventsPerClient;
    const expectedReceived = totalSent * (clientCount - 1);
    const throughput = Math.round(receivedCount / (duration / 1000));
    const memoryIncrease = (endMemory.heapUsed - startMemory.heapUsed) / 1024 / 1024;

    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ EventEmitter:`);
    console.log(`  üéØ Emitters: ${clientCount}`);
    console.log(`  üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${totalSent.toLocaleString()}`);
    console.log(`  üì• –û–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å: ${expectedReceived.toLocaleString()}`);
    console.log(`  ‚úÖ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω–æ: ${receivedCount.toLocaleString()}`);
    console.log(`  ‚ö° –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ${throughput.toLocaleString()} events/sec`);
    console.log(`  ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
    console.log(`  üß† –ü—Ä–∏—Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏: ${memoryIncrease.toFixed(2)}MB`);
    console.log(`  üíæ –ü–∞–º—è—Ç—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: ${((memoryIncrease * 1024) / totalSent).toFixed(3)}KB`);

    // –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º EventBroker
    setTimeout(() => testEventBroker(throughput, memoryIncrease), 100);
  }, 100);
}

function testEventBroker(eventEmitterThroughput, eventEmitterMemory) {
  console.log(`\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º EventBroker...`);

  const broker = new EventBroker();
  const clients = [];
  const clientCount = 100;
  const eventsPerClient = 1000;
  let receivedCount = 0;

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã EventBroker
  for (let i = 0; i < clientCount; i++) {
    const client = new InMemoryClient(`client-${i}`, broker);
    clients.push(client);

    client.on('test-event', () => {
      receivedCount++;
    });
  }

  const startTime = Date.now();
  const startMemory = process.memoryUsage();

  // –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è
  clients.forEach((client, clientIndex) => {
    for (let i = 0; i < eventsPerClient; i++) {
      client.broadcast('test-event', {
        id: clientIndex * eventsPerClient + i,
        clientId: clientIndex,
        payload: `Event ${i} from client ${clientIndex}`,
      });
    }
  });

  setTimeout(() => {
    const endTime = Date.now();
    const endMemory = process.memoryUsage();
    const duration = endTime - startTime;

    const totalSent = clientCount * eventsPerClient;
    const expectedReceived = totalSent * (clientCount - 1);
    const throughput = Math.round(receivedCount / (duration / 1000));
    const memoryIncrease = (endMemory.heapUsed - startMemory.heapUsed) / 1024 / 1024;

    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ EventBroker:`);
    console.log(`  üéØ –ö–ª–∏–µ–Ω—Ç–æ–≤: ${clientCount}`);
    console.log(`  üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${totalSent.toLocaleString()}`);
    console.log(`  üì• –û–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å: ${expectedReceived.toLocaleString()}`);
    console.log(`  ‚úÖ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω–æ: ${receivedCount.toLocaleString()}`);
    console.log(`  ‚ö° –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ${throughput.toLocaleString()} events/sec`);
    console.log(`  ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
    console.log(`  üß† –ü—Ä–∏—Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏: ${memoryIncrease.toFixed(2)}MB`);
    console.log(`  üíæ –ü–∞–º—è—Ç—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: ${((memoryIncrease * 1024) / totalSent).toFixed(3)}KB`);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    console.log(`\nüèÜ –°–†–ê–í–ù–ï–ù–ò–ï:`);
    console.log(
      `  üìà EventBroker –±—ã—Å—Ç—Ä–µ–µ –≤: ${(throughput / eventEmitterThroughput).toFixed(2)}x —Ä–∞–∑`,
    );
    console.log(
      `  üíæ EventBroker —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –ø–æ –ø–∞–º—è—Ç–∏: ${(eventEmitterMemory / memoryIncrease).toFixed(2)}x —Ä–∞–∑`,
    );

    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω
    console.log(`\nüîç –ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù –ü–†–ï–í–û–°–•–û–î–°–¢–í–ê EventBroker:`);
    console.log(`  1. üéØ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è vs N√óN –ø–æ–¥–ø–∏—Å–∫–∏`);
    console.log(`  2. üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (Map vs –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–∞—Å—Å–∏–≤—ã)`);
    console.log(`  3. üíæ –ï–¥–∏–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è vs –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–ø–∏–∏`);
    console.log(`  4. üîß –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –º–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–≤`);
    console.log(`  5. ‚ö° Batch-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ü–∏–∫–ª–µ vs –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ emit'—ã`);

    broker.destroy();
    process.exit(0);
  }, 100);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
testEventEmitter();
