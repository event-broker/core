/**
 * –ß–µ—Å—Ç–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ EventBroker vs EventEmitter
 * –° –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ–±–æ–∏—Ö
 */

const { EventBroker } = require('../dist/core/EventBroker');
const { InMemoryClient } = require('../dist/clients/InMemoryClient/InMemoryClient');
const { EventEmitter } = require('events');

console.log('üî¨ –ß–ï–°–¢–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï: EventBroker vs EventEmitter üî¨\n');

function testEventEmitterCorrect() {
  console.log('üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º EventEmitter (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è)...');

  const emitters = [];
  const clientCount = 100;
  const eventsPerClient = 1000;
  let receivedCount = 0;

  // –®–ê“ê–ì 1: –°–æ–∑–¥–∞–µ–º –í–°–ï emitters
  for (let i = 0; i < clientCount; i++) {
    const emitter = new EventEmitter();
    emitter.setMaxListeners(clientCount);
    emitters.push(emitter);
  }

  // –®–ê–ì 2: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –º–µ–∂–¥—É –í–°–ï–ú–ò
  emitters.forEach((emitter, i) => {
    emitters.forEach((otherEmitter, j) => {
      if (i !== j) {
        otherEmitter.on('test-event', () => {
          receivedCount++;
        });
      }
    });
  });

  const startTime = Date.now();
  const startMemory = process.memoryUsage();

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
  emitters.forEach((emitter, emitterIndex) => {
    for (let i = 0; i < eventsPerClient; i++) {
      emitter.emit('test-event', {
        id: emitterIndex * eventsPerClient + i,
        clientId: emitterIndex,
        payload: `Event ${i} from emitter ${emitterIndex}`,
      });
    }
  });

  setTimeout(() => {
    const endTime = Date.now();
    const endMemory = process.memoryUsage();
    const duration = endTime - startTime;

    const totalSent = clientCount * eventsPerClient;
    const expectedReceived = totalSent * (clientCount - 1);
    const throughput = Math.round(receivedCount / (duration / 1000));
    const memoryIncrease = (endMemory.heapUsed - startMemory.heapUsed) / 1024 / 1024;

    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ EventEmitter (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π):`);
    console.log(`  üéØ Emitters: ${clientCount}`);
    console.log(`  üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${totalSent.toLocaleString()}`);
    console.log(`  üì• –û–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å: ${expectedReceived.toLocaleString()}`);
    console.log(`  ‚úÖ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω–æ: ${receivedCount.toLocaleString()}`);
    console.log(`  üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: ${((receivedCount / expectedReceived) * 100).toFixed(2)}%`);
    console.log(`  ‚ö° –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ${throughput.toLocaleString()} events/sec`);
    console.log(`  ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
    console.log(`  üß† –ü—Ä–∏—Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏: ${memoryIncrease.toFixed(2)}MB`);

    // –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º EventBroker
    setTimeout(() => testEventBroker(throughput, memoryIncrease, duration), 100);
  }, 100);
}

function testEventBroker(emitterThroughput, emitterMemory, emitterDuration) {
  console.log(`\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º EventBroker...`);

  const broker = new EventBroker();
  const clients = [];
  const clientCount = 100;
  const eventsPerClient = 1000;
  let receivedCount = 0;

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
  for (let i = 0; i < clientCount; i++) {
    const client = new InMemoryClient(`client-${i}`, broker);
    clients.push(client);

    client.on('test-event', () => {
      receivedCount++;
    });
  }

  const startTime = Date.now();
  const startMemory = process.memoryUsage();

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
  clients.forEach((client, clientIndex) => {
    for (let i = 0; i < eventsPerClient; i++) {
      client.broadcast('test-event', {
        id: clientIndex * eventsPerClient + i,
        clientId: clientIndex,
        payload: `Event ${i} from client ${clientIndex}`,
      });
    }
  });

  setTimeout(() => {
    const endTime = Date.now();
    const endMemory = process.memoryUsage();
    const duration = endTime - startTime;

    const totalSent = clientCount * eventsPerClient;
    const expectedReceived = totalSent * (clientCount - 1);
    const throughput = Math.round(receivedCount / (duration / 1000));
    const memoryIncrease = (endMemory.heapUsed - startMemory.heapUsed) / 1024 / 1024;

    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ EventBroker:`);
    console.log(`  üéØ –ö–ª–∏–µ–Ω—Ç–æ–≤: ${clientCount}`);
    console.log(`  üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${totalSent.toLocaleString()}`);
    console.log(`  üì• –û–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å: ${expectedReceived.toLocaleString()}`);
    console.log(`  ‚úÖ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω–æ: ${receivedCount.toLocaleString()}`);
    console.log(`  üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: ${((receivedCount / expectedReceived) * 100).toFixed(2)}%`);
    console.log(`  ‚ö° –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ${throughput.toLocaleString()} events/sec`);
    console.log(`  ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
    console.log(`  üß† –ü—Ä–∏—Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏: ${memoryIncrease.toFixed(2)}MB`);

    // –ß–µ—Å—Ç–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    console.log(`\nüèÜ –ß–ï–°–¢–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:`);
    console.log(`  ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å:`);
    console.log(
      `     EventEmitter: ${emitterThroughput.toLocaleString()} events/sec –∑–∞ ${emitterDuration}ms`,
    );
    console.log(`     EventBroker:  ${throughput.toLocaleString()} events/sec –∑–∞ ${duration}ms`);
    console.log(`     –†–∞–∑–Ω–∏—Ü–∞: ${(emitterThroughput / throughput).toFixed(2)}x`);
    console.log(`  üíæ –ü–∞–º—è—Ç—å:`);
    console.log(`     EventEmitter: ${emitterMemory.toFixed(2)}MB`);
    console.log(`     EventBroker:  ${memoryIncrease.toFixed(2)}MB`);
    console.log(`     –†–∞–∑–Ω–∏—Ü–∞: ${(memoryIncrease / emitterMemory).toFixed(2)}x`);

    console.log(`\nüéØ –í –ß–ï–ú –ù–ê–°–¢–û–Ø–©–ê–Ø –†–ê–ó–ù–ò–¶–ê:`);
    console.log(`  1. üì¶ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:`);
    console.log(`     ‚Ä¢ EventEmitter: decentralized, N√óN —Å–≤—è–∑–µ–π, —Å–ª–æ–∂–Ω–æ—Å—Ç—å O(N¬≤)`);
    console.log(`     ‚Ä¢ EventBroker: centralized hub, –æ–¥–Ω–∞ —Ç–æ—á–∫–∞, —Å–ª–æ–∂–Ω–æ—Å—Ç—å O(N)`);
    console.log(`  2. üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:`);
    console.log(`     ‚Ä¢ EventEmitter: –Ω–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞`);
    console.log(`     ‚Ä¢ EventBroker: –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π ACL, –∫—Ç–æ –∫–æ–º—É –º–æ–∂–µ—Ç —Å–ª–∞—Ç—å`);
    console.log(`  3. üõ†Ô∏è DevTools:`);
    console.log(`     ‚Ä¢ EventEmitter: console.log –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏`);
    console.log(`     ‚Ä¢ EventBroker: –≤–∏–∑—É–∞–ª—å–Ω—ã–µ DevTools, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥`);
    console.log(`  4. üìò TypeScript:`);
    console.log(`     ‚Ä¢ EventEmitter: –±–∞–∑–æ–≤–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è`);
    console.log(`     ‚Ä¢ EventBroker: —Å—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –∏ payload`);
    console.log(`  5. üèóÔ∏è –î–ª—è –º–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–≤:`);
    console.log(`     ‚Ä¢ EventEmitter: —Ç—Ä–µ–±—É–µ—Ç –æ–±–µ—Ä—Ç–∫–∏ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã`);
    console.log(`     ‚Ä¢ EventBroker: –≥–æ—Ç–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤`);

    console.log(`\nüí° –í–´–í–û–î:`);
    console.log(`  EventEmitter –±—ã—Å—Ç—Ä–µ–µ –∏ –ª–µ–≥—á–µ, –Ω–æ —ç—Ç–æ –ø—Ä–∏–º–∏—Ç–∏–≤.`);
    console.log(`  EventBroker - —ç—Ç–æ production-ready —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –º–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–≤.`);

    broker.destroy();
    process.exit(0);
  }, 100);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Å—Ç–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
testEventEmitterCorrect();
