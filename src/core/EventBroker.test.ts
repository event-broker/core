/**
 * –¢–µ—Å—Ç CloudEvents v1.0 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ EventBroker
 */

import { EventBroker } from './EventBroker';
import { InMemoryClient } from '../clients/InMemoryClient/InMemoryClient';

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
type TestEventType = 'user.created.v1' | 'order.placed.v1';
type TestEventPayloads = {
  'user.created.v1': { userId: string; email: string };
  'order.placed.v1': { orderId: string; amount: number };
};

describe('EventBroker CloudEvents v1.0', () => {
  let broker: EventBroker<TestEventType, TestEventPayloads, string>;

  beforeEach(() => {
    broker = new EventBroker<TestEventType, TestEventPayloads, string>();
  });

  afterEach(() => {
    broker.destroy();
  });

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ CloudEvents v1.0 —Ñ–æ—Ä–º–∞—Ç–µ', () => {
    const client = new InMemoryClient('user-service', broker);
    const receiverClient = new InMemoryClient('notification-service', broker);

    // –ö–ª–∏–µ–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ

    let receivedEvent: any;

    receiverClient.on('user.created.v1', (event) => {
      receivedEvent = event;
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ (tab sync –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π)
    client.sendTo('notification-service', 'user.created.v1', {
      userId: '123',
      email: 'test@example.com',
    });

    const event = receivedEvent;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è CloudEvents
    expect(event.specversion).toBe('1.0');
    expect(event.type).toBe('user.created.v1');
    expect(event.source).toBe('user-service');
    expect(event.id).toBeDefined();
    expect(event.time).toBeDefined();
    expect(event.datacontenttype).toBe('application/json');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    expect(event.data).toEqual({ userId: '123', email: 'test@example.com' });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º MFE —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    expect(event['mfe-recipient']).toBe('notification-service');
    expect(event['mfe-sessionid']).toBeDefined();

    // CloudEvents —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø—É
    expect(event.specversion).toBe('1.0');
  });

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', (done) => {
    const receiverClient = new InMemoryClient('test-service', broker);
    const senderClient = new InMemoryClient('user-service', broker);

    // –ö–ª–∏–µ–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    receiverClient.on('user.created.v1', (event) => {
      expect(event.type).toBe('user.created.v1');
      expect(event.source).toBe('user-service');
      expect((event.data as any).userId).toBe('123');
      expect(event['mfe-recipient']).toBe('test-service');
      done();
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    senderClient.sendTo('test-service', 'user.created.v1', {
      userId: '123',
      email: 'test@example.com',
    });
  });

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å broadcast —Å–æ–±—ã—Ç–∏—è', async () => {
    const handlerCalls: string[] = [];

    const client1 = new InMemoryClient('service-1', broker);
    const client2 = new InMemoryClient('service-2', broker);
    const client3 = new InMemoryClient('service-3', broker);

    // –ö–ª–∏–µ–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ—Ç —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    client1.on('order.placed.v1', () => {
      handlerCalls.push('service-1');
    });
    client2.on('order.placed.v1', () => {
      handlerCalls.push('service-2');
    });
    client3.on('order.placed.v1', () => {
      handlerCalls.push('service-3');
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º broadcast –∏–∑ service-3
    await client3.broadcast('order.placed.v1', { orderId: '456', amount: 100 });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ service-1 –∏ service-2 –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ, –Ω–æ service-3 (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å) - –Ω–µ—Ç
    expect(handlerCalls).toContain('service-1');
    expect(handlerCalls).toContain('service-2');
    expect(handlerCalls).not.toContain('service-3');
  });

  test('–¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è —Å–æ–±—ã—Ç–∏–π', async () => {
    const client1 = new InMemoryClient('service-1', broker);
    const client2 = new InMemoryClient('service-2', broker);

    // –ö–ª–∏–µ–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ

    const receivedEvents: any[] = [];

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    client2.on('user.created.v1', (event) => {
      receivedEvents.push(event);
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    client1.sendTo('service-2', 'user.created.v1', {
      userId: '1',
      email: 'a@b.com',
    });

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö timestamp
    await new Promise((resolve) => setTimeout(resolve, 2));

    client1.sendTo('service-2', 'user.created.v1', {
      userId: '2',
      email: 'c@d.com',
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ 2 —Å–æ–±—ã—Ç–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ ID –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    expect(receivedEvents).toHaveLength(2);
    expect(receivedEvents[0].id).not.toBe(receivedEvents[1].id);
    expect(receivedEvents[0].time).not.toBe(receivedEvents[1].time);
  });

  // üì® ACK Pattern Tests (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
  describe('ACK Pattern (Transport acknowledgment)', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É —Å–æ–±—ã—Ç–∏—è (ACK)', async () => {
      const senderClient = new InMemoryClient('users_app', broker);
      const receiverClient = new InMemoryClient('notification_app', broker);

      // –ö–ª–∏–µ–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ

      // –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
      receiverClient.on('user.created.v1', (event: any) => {
        console.log('Handler called - event DELIVERED:', event.data.userId);
      });

      // –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏
      const result = await senderClient.sendTo('notification_app', 'user.created.v1', {
        userId: '123',
        email: 'test@example.com',
      });

      // ‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
      expect(result.status).toBe('ACK');
      expect(result.message).toContain('delivered and handled');
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å NACK –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏', async () => {
      const senderClient = new InMemoryClient('users_app', broker);
      const receiverClient = new InMemoryClient('notification_app', broker);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ë–ï–ó –ø–æ–¥–ø–∏—Å–∫–∏
      const result = await senderClient.sendTo('notification_app', 'user.created.v1', {
        userId: '456',
        email: 'test2@example.com',
      });

      // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç NACK - –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
      expect(result.status).toBe('NACK');
      expect(result.message).toContain('not subscribed');
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å NACK –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ', async () => {
      const senderClient = new InMemoryClient('users_app', broker);
      const receiverClient = new InMemoryClient('notification_app', broker);

      // –ö–ª–∏–µ–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–¥–∞–µ—Ç - —Å–æ–±—ã—Ç–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º
      receiverClient.on('user.created.v1', (event: any) => {
        console.log('Handler called - event DELIVERED');
        throw new Error('Business logic failed');
      });

      // –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç NACK —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
      const result = await senderClient.sendTo('notification_app', 'user.created.v1', {
        userId: '789',
        email: 'will-fail@example.com',
      });

      // ‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
      expect(result.status).toBe('NACK');
      expect(result.message).toContain('not handled');
    });

    test('dispatch –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏', async () => {
      const senderClient = new InMemoryClient('users_app', broker);
      const receiverClient = new InMemoryClient('notification_app', broker);

      // –ö–ª–∏–µ–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ

      let eventReceived = false;

      receiverClient.on('user.created.v1', () => {
        eventReceived = true;
      });

      // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise
      const result = await senderClient.sendTo('notification_app', 'user.created.v1', {
        userId: '999',
        email: 'normal@example.com',
      });

      expect(result.status).toBe('ACK');
      expect(eventReceived).toBe(true);
    });

    test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å ACK –¥–ª—è broadcast —Å–æ–±—ã—Ç–∏–π', async () => {
      const senderClient = new InMemoryClient('users_app', broker);
      const client1 = new InMemoryClient('service-1', broker);
      const client2 = new InMemoryClient('service-2', broker);

      // –ö–ª–∏–µ–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ

      let handlersCalledCount = 0;

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –¥–≤—É—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
      client1.on('user.created.v1', () => {
        handlersCalledCount++;
      });
      client2.on('user.created.v1', () => {
        handlersCalledCount++;
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º broadcast
      const result = await senderClient.broadcast('user.created.v1', {
        userId: '999',
        email: 'broadcast@example.com',
      });

      // ‚úÖ Broadcast —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
      expect(result.status).toBe('ACK');
      expect(result.message).toContain('2');
      expect(handlersCalledCount).toBe(2);
    });
  });

  // üéØ New Unicast/Broadcast API Tests
  describe('sendTo() and broadcast() methods', () => {
    test('sendTo() –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É', async () => {
      const senderClient = new InMemoryClient('sender', broker);
      const receiverClient = new InMemoryClient('receiver', broker);

      let receivedEvent: any = null;
      receiverClient.on('user.created.v1', (event) => {
        receivedEvent = event;
      });

      const result = await senderClient.sendTo('receiver', 'user.created.v1', {
        userId: 'user123',
        email: 'test@example.com',
      });

      // unified EventResult
      expect(result.status).toBe('ACK');
      expect(result.status).toBe('ACK');
      expect(result.clientId).toBe('receiver');
      expect(result.message).toContain('delivered and handled');
      expect(result.timestamp).toBeDefined();
      expect(receivedEvent.data.userId).toBe('user123');
    });

    test('sendTo() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å NACK –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞', async () => {
      const senderClient = new InMemoryClient('sender', broker);

      const result = await senderClient.sendTo('nonexistent', 'user.created.v1', {
        userId: 'user123',
        email: 'test@example.com',
      });

      expect(result.status).toBe('NACK');
      expect(result.status).toBe('NACK');
      expect(result.clientId).toBe('nonexistent');
      expect(result.message).toContain('not subscribed');
    });

    test('sendTo() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å NACK –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π', async () => {
      const senderClient = new InMemoryClient('sender', broker);
      const receiverClient = new InMemoryClient('receiver', broker);

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ —Å–æ–±—ã—Ç–∏–µ —Å –æ—à–∏–±–∫–æ–π –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
      receiverClient.on('user.created.v1', () => {
        throw new Error('Handler error');
      });

      const result = await senderClient.sendTo('receiver', 'user.created.v1', {
        userId: 'user123',
        email: 'test@example.com',
      });

      expect(result.status).toBe('NACK');
      expect(result.status).toBe('NACK');
      expect(result.clientId).toBe('receiver');
      expect(result.message).toContain('not handled');
    });

    test('broadcast() –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è', async () => {
      const senderClient = new InMemoryClient('sender', broker);
      const client1 = new InMemoryClient('client1', broker);
      const client2 = new InMemoryClient('client2', broker);
      const client3 = new InMemoryClient('client3', broker);

      let handlersCalledCount = 0;
      const handledBy: string[] = [];

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
      client1.on('order.placed.v1', (event) => {
        handlersCalledCount++;
        handledBy.push('client1');
      });
      client2.on('order.placed.v1', (event) => {
        handlersCalledCount++;
        handledBy.push('client2');
      });
      // client3 –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω

      const result = await senderClient.broadcast('order.placed.v1', {
        orderId: 'order123',
        amount: 100,
      });

      expect(result.status).toBe('ACK');
      expect(result.message).toContain('2'); // Broadcast sent to 2 subscribers
      expect(result.timestamp).toBeDefined();
      expect(handlersCalledCount).toBe(2);
      expect(handledBy).toEqual(['client1', 'client2']);
    });

    test('broadcast() –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤', async () => {
      const senderClient = new InMemoryClient('lonely_sender', broker);

      const result = await senderClient.broadcast('user.created.v1', {
        userId: 'lonely123',
        email: 'lonely@example.com',
      });

      expect(result.status).toBe('NACK');
      expect(result.message).toContain('No subscribers');
    });

    test('broadcast() –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö', async () => {
      const senderClient = new InMemoryClient('sender', broker);
      const errorClient = new InMemoryClient('error_client', broker);

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ —Å –æ—à–∏–±–∫–æ–π
      errorClient.on('user.created.v1', async () => {
        throw new Error('Handler error');
      });

      const result = await senderClient.broadcast('user.created.v1', {
        userId: 'error123',
        email: 'error@example.com',
      });

      expect(result.status).toBe('ACK');
      expect(result.message).toContain('1');

      // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ –≤ fire-and-forget —Ä–µ–∂–∏–º–µ
      await new Promise((resolve) => setTimeout(resolve, 10));
    });
  });

  // üîÑ Unsubscription Tests (EventEmitter-style API)
  describe('Client Subscription/Unsubscription', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ off()', async () => {
      const senderClient = new InMemoryClient('sender', broker);
      const receiverClient = new InMemoryClient('receiver', broker);

      let handlerCalled = false;

      const handler = () => {
        handlerCalled = true;
      };

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
      receiverClient.on('user.created.v1', handler);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å
      await senderClient.sendTo('receiver', 'user.created.v1', {
        userId: '123',
        email: 'test@test.com',
      });
      expect(handlerCalled).toBe(true);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      handlerCalled = false;

      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è
      receiverClient.off('user.created.v1', handler);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–Ω–æ–≤–∞ - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ù–ï –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å
      await senderClient.sendTo('receiver', 'user.created.v1', {
        userId: '456',
        email: 'test2@test.com',
      });
      expect(handlerCalled).toBe(false);
    });

    test('–¥–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ—Ä–µ–∑ clear()', () => {
      const client = new InMemoryClient('test-service', broker);
      // –ö–ª–∏–µ–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ

      let handlersCallCount = 0;

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ on()
      client.on('user.created.v1', () => {
        handlersCallCount++;
      });
      client.on('order.placed.v1', () => {
        handlersCallCount++;
      });
      client.on('user.created.v1', () => {
        handlersCallCount++;
      }); // –≤—Ç–æ—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Ç–æ –∂–µ —Å–æ–±—ã—Ç–∏–µ

      // –û—á–∏—â–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      client.destroy(); // clear() removed - use destroy() instead

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å—Ä–∞–±–æ—Ç–∞—Ç—å
      client.sendTo('test-service', 'user.created.v1', { userId: '123', email: 'test@test.com' });
      client.sendTo('test-service', 'order.placed.v1', { orderId: 'order-123', amount: 100.5 });

      expect(handlersCallCount).toBe(0);
    });

    test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å on/off –∏ callback –æ—Ç–ø–∏—Å–∫–æ–π', () => {
      const client = new InMemoryClient('test-service', broker);
      // –ö–ª–∏–µ–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ

      let callCount = 0;
      const handler = () => {
        callCount++;
      };

      // –ü–æ–¥–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ on() (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏)
      const unsubscribeCallback = client.on('user.created.v1', handler);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å
      client.sendTo('test-service', 'user.created.v1', { userId: '123', email: 'test@test.com' });
      expect(callCount).toBe(1);

      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è —á–µ—Ä–µ–∑ callback
      unsubscribeCallback();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å
      client.sendTo('test-service', 'user.created.v1', {
        userId: '456',
        email: 'test2@test.com',
      });
      expect(callCount).toBe(1); // –æ—Å—Ç–∞–ª—Å—è 1

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ subscribe() –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      client.on('user.created.v1', handler);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å
      client.sendTo('test-service', 'user.created.v1', {
        userId: '789',
        email: 'test3@test.com',
      });
      expect(callCount).toBe(2);

      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è —á–µ—Ä–µ–∑ off()
      client.off('user.created.v1', handler);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å
      client.sendTo('test-service', 'user.created.v1', {
        userId: '999',
        email: 'test4@test.com',
      });
      expect(callCount).toBe(2); // –æ—Å—Ç–∞–ª—Å—è 2
    });
  });
});
