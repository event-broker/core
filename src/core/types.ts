import type { EventBroker } from './EventBroker';

/** –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ */
export type ClientID = string;

/**
 * CloudEvents v1.0 –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
 * @see https://cloudevents.io/
 */
export interface CloudEvent {
  /** CloudEvents specification version (REQUIRED) */
  specversion: '1.0';

  /** Event type (REQUIRED) */
  type: string;

  /** Event source (REQUIRED) */
  source: string;

  /** Unique event identifier (REQUIRED) */
  id: string;

  /** Event timestamp in ISO 8601 format (OPTIONAL) */
  time?: string;

  /** MIME type of data value (OPTIONAL) */
  datacontenttype?: string;

  /** Event payload (OPTIONAL) */
  data?: any;
}

/**
 * CloudEvents –¥–ª—è –º–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
 * –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
 */
export interface MicrofrontendCloudEvent<T extends string = string, P = any> extends CloudEvent {
  type: T;
  data: P;

  // Microfrontend-specific extensions (–¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞)
  /** Target microfrontend ID or '*' for broadcast */
  'mfe-recipient': ClientID | '*';

  /** Original sender session ID  */
  'mfe-sessionid'?: string;
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è - CloudEvents v1.0
export type Event<T extends string = string, P = any> = MicrofrontendCloudEvent<T, P>;

/**
 * –ü–æ–¥–ø–∏—Å—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: –ø–æ–ª—É—á–∞–µ—Ç CloudEvent
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π ACK/NACK —á–µ—Ä–µ–∑ Promise
 */
export type HandlerFn<T extends string, P = unknown> = (event: Event<T, P>) => void | Promise<void>;

/**
 * –ï–¥–∏–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
 */
export interface EventResult {
  /** –°—Ç–∞—Ç—É—Å: ACK = —É—Å–ø–µ—à–Ω–æ, NACK = –æ—à–∏–±–∫–∞ */
  status: 'ACK' | 'NACK';
  /** –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */
  message: string;
  /** –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ */
  timestamp: number;
  /** ID —Ü–µ–ª–µ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è unicast) */
  clientId?: ClientID;
}

export type OnSubscribeHandlerHook<T, M extends ClientID> = (
  eventType: T,
  microfrontendID: M,
) => void;

export type BeforeSendHook<T extends string, P extends Record<T, any>> = (
  event: Readonly<Event<T, P[T]>>,
) => boolean;

export type AfterSendHook<T extends string, P extends Record<T, any>> = (
  event: Readonly<Event<T, P[T]>>,
  result: { success: boolean; handled: boolean },
) => void;

/**
 * Unified Client interface - All clients use same subscription model
 * Both InMemoryClient and Transport clients implement on/off with handlers
 */
export interface Client<T extends string = string, P = any> {
  /** Unique client identifier */
  readonly id: ClientID;

  /**
   * Unified dispatch API for sending events
   * - recipient = clientId ‚Üí unicast via broker.sendTo
   * - recipient = '*'       ‚Üí broadcast via broker.broadcast
   */
  dispatch<K extends T>(
    eventType: K,
    recipient: ClientID | '*',
    data: P extends Record<T, any> ? P[K] : any,
  ): Promise<EventResult>;

  /** Subscribe to event type with handler (delegates to broker) */
  on<K extends T>(eventType: K, handler?: HandlerFn<K, P>): void;

  /** Unsubscribe from event type */
  off<K extends T>(eventType: K, handler?: HandlerFn<K, P>): void;

  /** Destroy client resources and close communication channels */
  destroy?(): void;
}

// =============================================================================
// ü™ù Event Broker Hooks
// =============================================================================

/**
 * Hook –¥–ª—è EventBroker - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
 *
 * @param broker - —ç–∫–∑–µ–º–ø–ª—è—Ä EventBroker
 * @returns cleanup —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ö—É–∫–∞
 */
export type EventBrokerHook<T extends string, P extends Record<T, any>, C extends string> = (
  broker: any, // EventBroker<T, P, C> - avoid circular dependency
) => () => void;
